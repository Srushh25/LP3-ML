Implement K-Means clustering/ hierarchical clustering on
sales_data_sample.csv dataset. Determine the number of clusters using the elbow method.



#Importing the necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
%matplotlib inline



#Reading the excel file
data = pd.read_csv('Mall_Customers.csv') 
# Changed the function from read_excel to read_csv since the file 
# likely has a .csv extension and contains comma-separated values




data.head()




#Reading the excel file
data = pd.read_csv('Mall_Customers.csv') 
# Changed the function from read_excel to read_csv since the file 
# likely has a .csv extension and contains comma-separated values

# Calculate the correlation matrix, excluding non-numeric columns
correlation_matrix = data.select_dtypes(include=np.number).corr() 

# Display the correlation matrix
print(correlation_matrix)







#Distribution of Annnual Income
plt.figure(figsize=(10, 6))
sns.set(style = 'whitegrid')
sns.distplot(data['Annual Income (k$)'])
plt.title('Distribution of Annual Income (k$)', fontsize = 20)
plt.xlabel('Range of Annual Income (k$)')
plt.ylabel('Count')








#Distribution of age
plt.figure(figsize=(10, 6))
sns.set(style = 'whitegrid')
sns.distplot(data['Age'])
plt.title('Distribution of Age', fontsize = 20)
plt.xlabel('Range of Age')
plt.ylabel('Count')






#Distribution of spending score
plt.figure(figsize=(10, 6))
sns.set(style = 'whitegrid')
sns.distplot(data['Spending Score (1-100)'])
plt.title('Distribution of Spending Score (1-100)', fontsize = 20)
plt.xlabel('Range of Spending Score (1-100)')
plt.ylabel('Count')











#Gender Analysis:
# Assuming the column name is 'Genre' instead of 'Gender' based on the global variable description
genders = data['Genre'].value_counts()  
sns.set_style('darkgrid')
plt.figure(figsize=(10,4))
sns.barplot(x=genders.index, y=genders.values)
plt.show()










# Assuming the column name is 'Genre' instead of 'Gender' based on the previous error
df1 = data[['CustomerID', 'Genre', 'Age', 'Annual Income (k$)', 'Spending Score (1-100)']]  
X = df1[['Annual Income (k$)', 'Spending Score (1-100)']]
#The input data
X.head()








#Scatterplot of the input data
plt.figure(figsize=(10,6))
sns.scatterplot(x = 'Annual Income (k$)',y = 'Spending Score (1-100)', data = X ,s = 60
)
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Spending Score (1-100) vs Annual Income (k$)')
plt.show()








#Importing KMeans from sklearn
from sklearn.cluster import KMeans








wcss=[]
for i in range(1,11):
  km=KMeans(n_clusters=i)
  km.fit(X)
  wcss.append(km.inertia_)
#The elbow curve
plt.figure(figsize=(12,6))
plt.plot(range(1,11),wcss)
plt.plot(range(1,11),wcss, linewidth=2, color='red', marker ='8')
plt.xlabel('K Value')
plt.xticks(np.arange(1,11,1))
plt.ylabel('WCSS')
plt.show()










#Taking 5 clusters
km1=KMeans(n_clusters=5)
#Fitting the input data
km1.fit(X)
#predicting the labels of the input data
y=km1.predict(X)
#adding the labels to a column named label
df1['label'] = y
#The new dataframe with the clustering done
df1.head()







#Scatterplot of the clusters
plt.figure(figsize=(10,6))
sns.scatterplot(x = 'Annual Income (k$)',y = 'Spending Score (1-100)',hue='label', palette=['green','orange','brown','dodgerblue','red'],legend='full',data = df1 ,s = 60 )
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Spending Score (1-100) vs Annual Income (k$)')
plt.show()








#Importing KMeans from sklearn
from sklearn.cluster import KMeans

#Taking the features
#Assume df1 is the DataFrame containing the required columns
X2=df1[['Age','Annual Income (k$)','Spending Score (1-100)']]
#Now we calculate the Within Cluster Sum of Squared Errors (WSS) for different values of k
wcss = []
for k in range(1,11):
  kmeans = KMeans(n_clusters=k, init='k-means++')
  kmeans.fit(X2)
  wcss.append(kmeans.inertia_)
plt.figure(figsize=(12,6))
plt.plot(range(1,11),wcss, linewidth=2, color='red', marker ='8')
plt.xlabel('K Value')
plt.xticks(np.arange(1,11,1))
plt.ylabel('WCSS')
plt.show()








#We choose the k for which WSS starts to diminish
km2 = KMeans(n_clusters=5)
y2 = km2.fit_predict(X2) # Changed km to km2 as km2 is the intended KMeans object

# Create df2 by making a copy of df1
df2 = df1.copy()  # This line is added to define df2 before using it

df2['label'] = y2
#The data with labels
df2.head()







fig = plt.figure(figsize=(20, 10))
ax = fig.add_subplot(111, projection='3d')

ax.scatter(df2.Age[df2.label == 0], df2['Annual Income (k$)'][df2.label == 0],
           df2['Spending Score (1-100)'][df2.label == 0], c='purple', s=60)

ax.scatter(df2.Age[df2.label == 1], df2['Annual Income (k$)'][df2.label == 1],
           df2['Spending Score (1-100)'][df2.label == 1], c='red', s=60)

ax.scatter(df2.Age[df2.label == 2], df2['Annual Income (k$)'][df2.label == 2],
           df2['Spending Score (1-100)'][df2.label == 2], c='blue', s=60)

ax.scatter(df2.Age[df2.label == 3], df2['Annual Income (k$)'][df2.label == 3],
           df2['Spending Score (1-100)'][df2.label == 3], c='green', s=60)

ax.scatter(df2.Age[df2.label == 4], df2['Annual Income (k$)'][df2.label == 4],
           df2['Spending Score (1-100)'][df2.label == 4], c='yellow', s=60)

ax.view_init(35, 185)
plt.xlabel('Age')
plt.ylabel('Annual Income (k$)')
ax.set_zlabel('Spending Score (1-100)')

plt.show()









cust1 = df2[df2['label'] == 1]
print('Number of customers in 1st group=', len(cust1))
print('They are -', cust1['CustomerID'].values)
print(" ")

cust2 = df2[df2['label'] == 2]
print('Number of customers in 2nd group=', len(cust2))
print('They are -', cust2['CustomerID'].values)
print(" ")

cust3 = df2[df2['label'] == 0]
print('Number of customers in 3rd group=', len(cust3))
print('They are -', cust3['CustomerID'].values)
print(" ")

cust4 = df2[df2['label'] == 3]
print('Number of customers in 4th group=', len(cust4))
print('They are -', cust4['CustomerID'].values)
print(" ")

cust5 = df2[df2['label'] == 4]
print('Number of customers in 5th group=', len(cust5))
print('They are -', cust5['CustomerID'].values)
